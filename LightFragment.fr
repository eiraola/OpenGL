#version 330 core
#define NR_LIGHTS 1
//THIS REALLY NEEDS A REFACTOR
struct Material {
    sampler2D diffuseMap;
    bool useDiffuseMap;
    sampler2D specular;
    bool useSpecularMap;
    vec3 ambient;
    vec3 diffuse;
    float shininess;
}; 
  
  struct Light {
    //X = Directional, Y = Point, Z = Spot
    vec3 type;
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    vec3 direction;
    float cutOff;
    float outerCutOff;

    float constant;
    float linear;
    float quadratic;
};
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;

uniform Light lights[NR_LIGHTS];
uniform Material material;
uniform vec3 viewPos; 


float Attenuation(Light light){
    float distance    = length(light.position - FragPos);
    return 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
}

vec3 DirectionalLight(Light light){
 
 
    // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  

    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    
    return  (ambient + diffuse + specular);
} 

vec3 PointLight(Light light){

    float attenuation = Attenuation(light);

        // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  
    // specular

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    return  (ambient + diffuse + specular) * attenuation;
}

vec3 Spotlight(Light light){


    float attenuation = Attenuation(light);  

        // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    vec3 result = (ambient + diffuse + specular) * attenuation;

   
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon   = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); 
    
    if(theta > light.outerCutOff) 
    {       
        specular*= intensity;
        diffuse*= intensity;
        return (ambient + diffuse + specular) * attenuation;
    }
    else  
    {
        return light.ambient * vec3(texture(material.diffuseMap, TexCoords)) * attenuation;
    } 
}

void main()
{
   
    vec3 result = vec3(0.0, 0.0, 0.0);

    for(int i = 0; i < NR_LIGHTS; i++){

        if(lights[i].type.x > 0.9f){
            result += DirectionalLight(lights[i]);
        }

        else if(lights[i].type.y > 0.9f){

            result += PointLight(lights[i]);

        }

        else if(lights[i].type.z > 0.9f){

           result += Spotlight(lights[i]);

        }
    }
  
    FragColor = vec4(result, 1.0);

}