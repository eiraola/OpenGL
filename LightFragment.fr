#version 330 core

//THIS REALLY NEEDS A REFACTOR
struct Material {
    sampler2D diffuseMap;
    vec3 ambient;
    vec3 diffuse;
    sampler2D specular;
    float shininess;
}; 
  
  struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    vec3 direction;
    float cutOff;
    float outerCutOff;

    float constant;
    float linear;
    float quadratic;
};
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;

uniform Light light;  
uniform Material material;
uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;


float Attenuation(){
    float distance    = length(light.position - FragPos);
    return 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
}

vec4 DirectionalLight(){
 

    // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  


    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));

    return  vec4((ambient + diffuse + specular), 1.0);
} 

vec4 PointLight(){

    float attenuation = Attenuation();

        // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  
    // specular

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    return  vec4((ambient + diffuse + specular) * attenuation, 1.0);
}

vec4 Spotlight(){

    float attenuation = Attenuation();  

        // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuseMap, TexCoords));
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuseMap, TexCoords));  
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    vec3 result = (ambient + diffuse + specular) * attenuation;


    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon   = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); 
    
    if(theta > light.outerCutOff) 
    {       
        specular*= intensity;
        diffuse*= intensity;
        return vec4((ambient + diffuse + specular) * attenuation, 1.0);
    }
    else  
    {
        return vec4(light.ambient * vec3(texture(material.diffuseMap, TexCoords)), 1.0) * attenuation;
    } 
}

void main()
{
    FragColor = DirectionalLight();
}